#!/usr/bin/env node

/*
 * IP/Port configuration file. 
 * Author: Paruku Paerhati
 */

var debug = require('debug')('Pangaea');
var app = require('../app');

// Openshift port/ip configuration
var server_port = process.env.OPENSHIFT_NODEJS_PORT || 3000
var server_ip_address = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';

app.set('port', server_port);
app.set('ip', server_ip_address);

var server = app.listen(app.get('port'), app.get('ip'), function() {
  debug('Express server listening on port ' + server.address().port);
});

// These dictionaries help map users to their sockets and vice versa
app.set('user to socket', {});
app.set('socket to user', {});

// Setting up the socket connections :)
var io = require('socket.io').listen(server);
io.on('connection', function(socket){
	var user_to_socket = app.get('user to socket');
	var socket_to_user = app.get('socket to user');
	var current_users = io.sockets.sockets;

	// The list of the room id's that the socket has joined
	var joined_rooms = [];

	update_users();

	socket.on('disconnect', function(){
		console.log('disconnected');
		update_users();
		delete socket_to_user[socket.id];

		// Sending an update to all the sockets that the disconnecting sockets was a part of
		joined_rooms.forEach(function(room_id){
			update_users_in_room(room_id);
		});
	});

	socket.on('update user socket', function(user_name){
		user_to_socket[user_name] = socket.id;
		socket.user = {username: user_name};
	});

	/*** Exchange message handling ***/

	socket.on('join room', function(room_id){
		socket.join(room_id);
		joined_rooms.push(room_id);
		update_users_in_room(room_id);
	});	

	socket.on('room message', function(obj){
		io.to(obj.room_id).emit('room message', obj);
	});

	function update_users(){
		socket_ids = current_users.map(function(value){
			return value.id;
		});
		io.emit('users update', socket_ids);
	}

	function update_users_in_room(room_id){
		var sockets_in_room = get_sockets_in_room(room_id);
		var users = sockets_in_room.map(function(value){
			return value.user;
		});
		var obj = {users: users, exchange_id: room_id};
		io.to(room_id).emit('users room update', obj);
	}

	function get_sockets_in_room(room_id){
		var namespace = '/';
		var roomName =  room_id;
		var sockets = io.nsps[namespace].adapter.rooms[roomName];

		if(sockets){
			var socket_ids = Object.keys(sockets);

			return socket_ids.map(function(socket_id){
				return io.sockets.connected[socket_id];
			});
		} else {
			return []
		}
	}
});

app.set('io', io);
